/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApplicationDetailsResponse;
import com.konfigthis.client.model.ApplicationStatusResponse;
import com.konfigthis.client.model.ApplicationSubmitRequestModel;
import com.konfigthis.client.model.ApplicationSubmitResponseModel;
import com.konfigthis.client.model.BankDetailsModel;
import com.konfigthis.client.model.BusinessDetailsModel;
import com.konfigthis.client.model.CustomerServiceContactModel;
import com.konfigthis.client.model.OwnerModel;
import com.konfigthis.client.model.PersonModel;
import com.konfigthis.client.model.PricingModel;
import com.konfigthis.client.model.ProcessingDetailsModel;
import com.konfigthis.client.model.RiskContactModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Disabled
public class ApplicationApiTest {

    private static ApplicationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ApplicationApi(apiClient);
    }

    /**
     * Submit a new Application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewApplicationTest() throws ApiException {
        String isvName = null;
        BusinessDetailsModel businessDetails = null;
        CustomerServiceContactModel customerServiceContact = null;
        RiskContactModel riskContact = null;
        PersonModel businessContact = null;
        ProcessingDetailsModel processingDetails = null;
        BankDetailsModel bankDetails = null;
        PricingModel pricingStructure = null;
        String externalId = null;
        List<OwnerModel> owners = null;
        ApplicationSubmitResponseModel response = api.createNewApplication(isvName, businessDetails, customerServiceContact, riskContact, businessContact, processingDetails, bankDetails, pricingStructure)
                .externalId(externalId)
                .owners(owners)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Details for an Application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationDetailsTest() throws ApiException {
        String appId = null;
        ApplicationDetailsResponse response = api.getApplicationDetails(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets the Status of an Application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationStatusTest() throws ApiException {
        String appId = null;
        ApplicationStatusResponse response = api.getApplicationStatus(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String appId = null;
        api.removeById(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Start Underwriting Process for an Application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startUnderwritingProcessTest() throws ApiException {
        String appId = null;
        api.startUnderwritingProcess(appId)
                .execute();
        // TODO: test validations
    }

}
