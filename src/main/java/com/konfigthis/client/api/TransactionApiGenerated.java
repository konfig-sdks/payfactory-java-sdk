/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TransactionMetadataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransactionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"pf-api-key\" is required but no API key was provided. Please set \"pf-api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMetadataCall(TransactionMetadataRequest transactionMetadataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionMetadataRequest;

        // create path and map variables
        String localVarPath = "/v1/Transaction/Metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMetadataValidateBeforeCall(TransactionMetadataRequest transactionMetadataRequest, final ApiCallback _callback) throws ApiException {
        return createMetadataCall(transactionMetadataRequest, _callback);

    }


    private ApiResponse<Object> createMetadataWithHttpInfo(TransactionMetadataRequest transactionMetadataRequest) throws ApiException {
        okhttp3.Call localVarCall = createMetadataValidateBeforeCall(transactionMetadataRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMetadataAsync(TransactionMetadataRequest transactionMetadataRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMetadataValidateBeforeCall(transactionMetadataRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMetadataRequestBuilder {
        private final String transactionId;
        private final String merchantId;
        private final String cardHolderName;
        private String externalId;
        private String orderId;
        private Double partnerFee;
        private Integer itemCount;

        private CreateMetadataRequestBuilder(String transactionId, String merchantId, String cardHolderName) {
            this.transactionId = transactionId;
            this.merchantId = merchantId;
            this.cardHolderName = cardHolderName;
        }

        /**
         * Set externalId
         * @param externalId Any identifier you choose to send (optional)
         * @return CreateMetadataRequestBuilder
         */
        public CreateMetadataRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set orderId
         * @param orderId Any identifier you choose to send (optional)
         * @return CreateMetadataRequestBuilder
         */
        public CreateMetadataRequestBuilder orderId(String orderId) {
            this.orderId = orderId;
            return this;
        }
        
        /**
         * Set partnerFee
         * @param partnerFee Required if partner is configured for the partner fee program (optional)
         * @return CreateMetadataRequestBuilder
         */
        public CreateMetadataRequestBuilder partnerFee(Double partnerFee) {
            this.partnerFee = partnerFee;
            return this;
        }
        
        /**
         * Set itemCount
         * @param itemCount Number of items sold in the transaction (optional)
         * @return CreateMetadataRequestBuilder
         */
        public CreateMetadataRequestBuilder itemCount(Integer itemCount) {
            this.itemCount = itemCount;
            return this;
        }
        
        /**
         * Build call for createMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionMetadataRequest transactionMetadataRequest = buildBodyParams();
            return createMetadataCall(transactionMetadataRequest, _callback);
        }

        private TransactionMetadataRequest buildBodyParams() {
            TransactionMetadataRequest transactionMetadataRequest = new TransactionMetadataRequest();
            transactionMetadataRequest.transactionId(this.transactionId);
            transactionMetadataRequest.merchantId(this.merchantId);
            transactionMetadataRequest.cardHolderName(this.cardHolderName);
            transactionMetadataRequest.externalId(this.externalId);
            transactionMetadataRequest.orderId(this.orderId);
            transactionMetadataRequest.partnerFee(this.partnerFee);
            transactionMetadataRequest.itemCount(this.itemCount);
            return transactionMetadataRequest;
        }

        /**
         * Execute createMetadata request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            TransactionMetadataRequest transactionMetadataRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createMetadataWithHttpInfo(transactionMetadataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMetadata request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            TransactionMetadataRequest transactionMetadataRequest = buildBodyParams();
            return createMetadataWithHttpInfo(transactionMetadataRequest);
        }

        /**
         * Execute createMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            TransactionMetadataRequest transactionMetadataRequest = buildBodyParams();
            return createMetadataAsync(transactionMetadataRequest, _callback);
        }
    }

    /**
     * Post Metadata related to a Transaction
     * 
     * @return CreateMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateMetadataRequestBuilder createMetadata(String transactionId, String merchantId, String cardHolderName) throws IllegalArgumentException {
        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            if (transactionId != null && transactionId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for transactionId. Length must be greater than or equal to 1.");
            }

        if (merchantId == null) throw new IllegalArgumentException("\"merchantId\" is required but got null");
            if (merchantId != null && merchantId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for merchantId. Length must be greater than or equal to 1.");
            }

        if (cardHolderName == null) throw new IllegalArgumentException("\"cardHolderName\" is required but got null");
            if (cardHolderName != null && cardHolderName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for cardHolderName. Length must be greater than or equal to 1.");
            }

        return new CreateMetadataRequestBuilder(transactionId, merchantId, cardHolderName);
    }
    private okhttp3.Call createMetadataBulkCall(List<TransactionMetadataRequest> transactionMetadataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionMetadataRequest;

        // create path and map variables
        String localVarPath = "/v1/Transaction/MetadataBulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMetadataBulkValidateBeforeCall(List<TransactionMetadataRequest> transactionMetadataRequest, final ApiCallback _callback) throws ApiException {
        return createMetadataBulkCall(transactionMetadataRequest, _callback);

    }


    private ApiResponse<Object> createMetadataBulkWithHttpInfo(List<TransactionMetadataRequest> transactionMetadataRequest) throws ApiException {
        okhttp3.Call localVarCall = createMetadataBulkValidateBeforeCall(transactionMetadataRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMetadataBulkAsync(List<TransactionMetadataRequest> transactionMetadataRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMetadataBulkValidateBeforeCall(transactionMetadataRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMetadataBulkRequestBuilder {
        private List<TransactionMetadataRequest> transactionMetadataRequest;

        private CreateMetadataBulkRequestBuilder() {
        }

        /**
         * Set transactionMetadataRequest
         * @param transactionMetadataRequest  (optional)
         * @return CreateMetadataBulkRequestBuilder
         */
        public CreateMetadataBulkRequestBuilder transactionMetadataRequest(List<TransactionMetadataRequest> transactionMetadataRequest) {
            this.transactionMetadataRequest = transactionMetadataRequest;
            return this;
        }

        /**
         * Build call for createMetadataBulk
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<TransactionMetadataRequest> transactionMetadataRequest = buildBodyParams();
            return createMetadataBulkCall(transactionMetadataRequest, _callback);
        }

        private List<TransactionMetadataRequest> buildBodyParams() {
            return this.transactionMetadataRequest;
        }

        /**
         * Execute createMetadataBulk request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            List<TransactionMetadataRequest> transactionMetadataRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createMetadataBulkWithHttpInfo(transactionMetadataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMetadataBulk request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            List<TransactionMetadataRequest> transactionMetadataRequest = buildBodyParams();
            return createMetadataBulkWithHttpInfo(transactionMetadataRequest);
        }

        /**
         * Execute createMetadataBulk request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            List<TransactionMetadataRequest> transactionMetadataRequest = buildBodyParams();
            return createMetadataBulkAsync(transactionMetadataRequest, _callback);
        }
    }

    /**
     * Post multiple Metadate related to a Transactions
     * 
     * @return CreateMetadataBulkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateMetadataBulkRequestBuilder createMetadataBulk() throws IllegalArgumentException {
        return new CreateMetadataBulkRequestBuilder();
    }
}
