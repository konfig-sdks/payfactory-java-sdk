/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateSessionRequest;
import com.konfigthis.client.model.CreateSessionRequestSignerModel;
import com.konfigthis.client.model.SessionBusinessDetailsModel;
import com.konfigthis.client.model.SessionResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationFormApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationFormApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationFormApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"pf-api-key\" is required but no API key was provided. Please set \"pf-api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSessionCall(CreateSessionRequest createSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSessionRequest;

        // create path and map variables
        String localVarPath = "/v1/ApplicationForm/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionValidateBeforeCall(CreateSessionRequest createSessionRequest, final ApiCallback _callback) throws ApiException {
        return createSessionCall(createSessionRequest, _callback);

    }


    private ApiResponse<SessionResponse> createSessionWithHttpInfo(CreateSessionRequest createSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSessionValidateBeforeCall(createSessionRequest, null);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSessionAsync(CreateSessionRequest createSessionRequest, final ApiCallback<SessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionValidateBeforeCall(createSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSessionRequestBuilder {
        private final CreateSessionRequestSignerModel signer;
        private final String companyName;
        private final URI redirectUrl;
        private final URI completeUrl;
        private final URI refreshUrl;
        private final String externalId;
        private String pricingPlanId;
        private SessionBusinessDetailsModel businessDetails;

        private CreateSessionRequestBuilder(CreateSessionRequestSignerModel signer, String companyName, URI redirectUrl, URI completeUrl, URI refreshUrl, String externalId) {
            this.signer = signer;
            this.companyName = companyName;
            this.redirectUrl = redirectUrl;
            this.completeUrl = completeUrl;
            this.refreshUrl = refreshUrl;
            this.externalId = externalId;
        }

        /**
         * Set pricingPlanId
         * @param pricingPlanId Id of the Pricing Plan. Only used if enabled for the partner (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder pricingPlanId(String pricingPlanId) {
            this.pricingPlanId = pricingPlanId;
            return this;
        }
        
        /**
         * Set businessDetails
         * @param businessDetails  (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder businessDetails(SessionBusinessDetailsModel businessDetails) {
            this.businessDetails = businessDetails;
            return this;
        }
        
        /**
         * Build call for createSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateSessionRequest createSessionRequest = buildBodyParams();
            return createSessionCall(createSessionRequest, _callback);
        }

        private CreateSessionRequest buildBodyParams() {
            CreateSessionRequest createSessionRequest = new CreateSessionRequest();
            createSessionRequest.pricingPlanId(this.pricingPlanId);
            createSessionRequest.signer(this.signer);
            createSessionRequest.companyName(this.companyName);
            createSessionRequest.redirectUrl(this.redirectUrl);
            createSessionRequest.completeUrl(this.completeUrl);
            createSessionRequest.refreshUrl(this.refreshUrl);
            createSessionRequest.externalId(this.externalId);
            createSessionRequest.businessDetails(this.businessDetails);
            return createSessionRequest;
        }

        /**
         * Execute createSession request
         * @return SessionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SessionResponse execute() throws ApiException {
            CreateSessionRequest createSessionRequest = buildBodyParams();
            ApiResponse<SessionResponse> localVarResp = createSessionWithHttpInfo(createSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSession request with HTTP info returned
         * @return ApiResponse&lt;SessionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SessionResponse> executeWithHttpInfo() throws ApiException {
            CreateSessionRequest createSessionRequest = buildBodyParams();
            return createSessionWithHttpInfo(createSessionRequest);
        }

        /**
         * Execute createSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SessionResponse> _callback) throws ApiException {
            CreateSessionRequest createSessionRequest = buildBodyParams();
            return createSessionAsync(createSessionRequest, _callback);
        }
    }

    /**
     * Creates a new Session
     * 
     * @return CreateSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionRequestBuilder createSession(CreateSessionRequestSignerModel signer, String companyName, URI redirectUrl, URI completeUrl, URI refreshUrl, String externalId) throws IllegalArgumentException {
        if (signer == null) throw new IllegalArgumentException("\"signer\" is required but got null");
        if (companyName == null) throw new IllegalArgumentException("\"companyName\" is required but got null");
            if (companyName != null && companyName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for companyName. Length must be greater than or equal to 1.");
            }

        if (redirectUrl == null) throw new IllegalArgumentException("\"redirectUrl\" is required but got null");
            if (redirectUrl != null && redirectUrl.length() < 1) {
              throw new IllegalArgumentException("Invalid value for redirectUrl. Length must be greater than or equal to 1.");
            }

        if (completeUrl == null) throw new IllegalArgumentException("\"completeUrl\" is required but got null");
            if (completeUrl != null && completeUrl.length() < 1) {
              throw new IllegalArgumentException("Invalid value for completeUrl. Length must be greater than or equal to 1.");
            }

        if (refreshUrl == null) throw new IllegalArgumentException("\"refreshUrl\" is required but got null");
            if (refreshUrl != null && refreshUrl.length() < 1) {
              throw new IllegalArgumentException("Invalid value for refreshUrl. Length must be greater than or equal to 1.");
            }

        if (externalId == null) throw new IllegalArgumentException("\"externalId\" is required but got null");
            if (externalId != null && externalId.length() < 3) {
              throw new IllegalArgumentException("Invalid value for externalId. Length must be greater than or equal to 3.");
            }

        return new CreateSessionRequestBuilder(signer, companyName, redirectUrl, completeUrl, refreshUrl, externalId);
    }
    private okhttp3.Call getSessionInfoCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ApplicationForm/session/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionInfoValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getSessionInfo(Async)");
        }

        return getSessionInfoCall(sessionId, _callback);

    }


    private ApiResponse<SessionResponse> getSessionInfoWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getSessionInfoValidateBeforeCall(sessionId, null);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSessionInfoAsync(String sessionId, final ApiCallback<SessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionInfoValidateBeforeCall(sessionId, _callback);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSessionInfoRequestBuilder {
        private final String sessionId;

        private GetSessionInfoRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for getSessionInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSessionInfoCall(sessionId, _callback);
        }


        /**
         * Execute getSessionInfo request
         * @return SessionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SessionResponse execute() throws ApiException {
            ApiResponse<SessionResponse> localVarResp = getSessionInfoWithHttpInfo(sessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSessionInfo request with HTTP info returned
         * @return ApiResponse&lt;SessionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SessionResponse> executeWithHttpInfo() throws ApiException {
            return getSessionInfoWithHttpInfo(sessionId);
        }

        /**
         * Execute getSessionInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SessionResponse> _callback) throws ApiException {
            return getSessionInfoAsync(sessionId, _callback);
        }
    }

    /**
     * Gets information about a Session
     * 
     * @param sessionId  (required)
     * @return GetSessionInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSessionInfoRequestBuilder getSessionInfo(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new GetSessionInfoRequestBuilder(sessionId);
    }
    private okhttp3.Call updateSessionActivityCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ApplicationForm/session/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSessionActivityValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateSessionActivity(Async)");
        }

        return updateSessionActivityCall(sessionId, _callback);

    }


    private ApiResponse<SessionResponse> updateSessionActivityWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = updateSessionActivityValidateBeforeCall(sessionId, null);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSessionActivityAsync(String sessionId, final ApiCallback<SessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSessionActivityValidateBeforeCall(sessionId, _callback);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSessionActivityRequestBuilder {
        private final String sessionId;

        private UpdateSessionActivityRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for updateSessionActivity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateSessionActivityCall(sessionId, _callback);
        }


        /**
         * Execute updateSessionActivity request
         * @return SessionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SessionResponse execute() throws ApiException {
            ApiResponse<SessionResponse> localVarResp = updateSessionActivityWithHttpInfo(sessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSessionActivity request with HTTP info returned
         * @return ApiResponse&lt;SessionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SessionResponse> executeWithHttpInfo() throws ApiException {
            return updateSessionActivityWithHttpInfo(sessionId);
        }

        /**
         * Execute updateSessionActivity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SessionResponse> _callback) throws ApiException {
            return updateSessionActivityAsync(sessionId, _callback);
        }
    }

    /**
     * Touch a Session, keeping it active
     * 
     * @param sessionId  (required)
     * @return UpdateSessionActivityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSessionActivityRequestBuilder updateSessionActivity(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new UpdateSessionActivityRequestBuilder(sessionId);
    }
}
