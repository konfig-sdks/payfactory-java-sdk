/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicationDetailsResponse;
import com.konfigthis.client.model.ApplicationStatusResponse;
import com.konfigthis.client.model.ApplicationSubmitRequestModel;
import com.konfigthis.client.model.ApplicationSubmitResponseModel;
import com.konfigthis.client.model.BankDetailsModel;
import com.konfigthis.client.model.BusinessDetailsModel;
import com.konfigthis.client.model.CustomerServiceContactModel;
import com.konfigthis.client.model.OwnerModel;
import com.konfigthis.client.model.PersonModel;
import com.konfigthis.client.model.PricingModel;
import com.konfigthis.client.model.ProcessingDetailsModel;
import com.konfigthis.client.model.RiskContactModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"pf-api-key\" is required but no API key was provided. Please set \"pf-api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewApplicationCall(ApplicationSubmitRequestModel applicationSubmitRequestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationSubmitRequestModel;

        // create path and map variables
        String localVarPath = "/v1/Application/Submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewApplicationValidateBeforeCall(ApplicationSubmitRequestModel applicationSubmitRequestModel, final ApiCallback _callback) throws ApiException {
        return createNewApplicationCall(applicationSubmitRequestModel, _callback);

    }


    private ApiResponse<ApplicationSubmitResponseModel> createNewApplicationWithHttpInfo(ApplicationSubmitRequestModel applicationSubmitRequestModel) throws ApiException {
        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(applicationSubmitRequestModel, null);
        Type localVarReturnType = new TypeToken<ApplicationSubmitResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewApplicationAsync(ApplicationSubmitRequestModel applicationSubmitRequestModel, final ApiCallback<ApplicationSubmitResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(applicationSubmitRequestModel, _callback);
        Type localVarReturnType = new TypeToken<ApplicationSubmitResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewApplicationRequestBuilder {
        private final String isvName;
        private final BusinessDetailsModel businessDetails;
        private final CustomerServiceContactModel customerServiceContact;
        private final RiskContactModel riskContact;
        private final PersonModel businessContact;
        private final ProcessingDetailsModel processingDetails;
        private final BankDetailsModel bankDetails;
        private final PricingModel pricingStructure;
        private String externalId;
        private List<OwnerModel> owners;

        private CreateNewApplicationRequestBuilder(String isvName, BusinessDetailsModel businessDetails, CustomerServiceContactModel customerServiceContact, RiskContactModel riskContact, PersonModel businessContact, ProcessingDetailsModel processingDetails, BankDetailsModel bankDetails, PricingModel pricingStructure) {
            this.isvName = isvName;
            this.businessDetails = businessDetails;
            this.customerServiceContact = customerServiceContact;
            this.riskContact = riskContact;
            this.businessContact = businessContact;
            this.processingDetails = processingDetails;
            this.bankDetails = bankDetails;
            this.pricingStructure = pricingStructure;
        }

        /**
         * Set externalId
         * @param externalId  (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set owners
         * @param owners  (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder owners(List<OwnerModel> owners) {
            this.owners = owners;
            return this;
        }
        
        /**
         * Build call for createNewApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationSubmitRequestModel applicationSubmitRequestModel = buildBodyParams();
            return createNewApplicationCall(applicationSubmitRequestModel, _callback);
        }

        private ApplicationSubmitRequestModel buildBodyParams() {
            ApplicationSubmitRequestModel applicationSubmitRequestModel = new ApplicationSubmitRequestModel();
            applicationSubmitRequestModel.externalId(this.externalId);
            applicationSubmitRequestModel.isvName(this.isvName);
            applicationSubmitRequestModel.businessDetails(this.businessDetails);
            applicationSubmitRequestModel.customerServiceContact(this.customerServiceContact);
            applicationSubmitRequestModel.riskContact(this.riskContact);
            applicationSubmitRequestModel.businessContact(this.businessContact);
            applicationSubmitRequestModel.processingDetails(this.processingDetails);
            applicationSubmitRequestModel.bankDetails(this.bankDetails);
            applicationSubmitRequestModel.pricingStructure(this.pricingStructure);
            applicationSubmitRequestModel.owners(this.owners);
            return applicationSubmitRequestModel;
        }

        /**
         * Execute createNewApplication request
         * @return ApplicationSubmitResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationSubmitResponseModel execute() throws ApiException {
            ApplicationSubmitRequestModel applicationSubmitRequestModel = buildBodyParams();
            ApiResponse<ApplicationSubmitResponseModel> localVarResp = createNewApplicationWithHttpInfo(applicationSubmitRequestModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewApplication request with HTTP info returned
         * @return ApiResponse&lt;ApplicationSubmitResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationSubmitResponseModel> executeWithHttpInfo() throws ApiException {
            ApplicationSubmitRequestModel applicationSubmitRequestModel = buildBodyParams();
            return createNewApplicationWithHttpInfo(applicationSubmitRequestModel);
        }

        /**
         * Execute createNewApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationSubmitResponseModel> _callback) throws ApiException {
            ApplicationSubmitRequestModel applicationSubmitRequestModel = buildBodyParams();
            return createNewApplicationAsync(applicationSubmitRequestModel, _callback);
        }
    }

    /**
     * Submit a new Application
     * 
     * @return CreateNewApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewApplicationRequestBuilder createNewApplication(String isvName, BusinessDetailsModel businessDetails, CustomerServiceContactModel customerServiceContact, RiskContactModel riskContact, PersonModel businessContact, ProcessingDetailsModel processingDetails, BankDetailsModel bankDetails, PricingModel pricingStructure) throws IllegalArgumentException {
        if (isvName == null) throw new IllegalArgumentException("\"isvName\" is required but got null");
            if (isvName != null && isvName.length() < 3) {
              throw new IllegalArgumentException("Invalid value for isvName. Length must be greater than or equal to 3.");
            }

        if (businessDetails == null) throw new IllegalArgumentException("\"businessDetails\" is required but got null");
        if (customerServiceContact == null) throw new IllegalArgumentException("\"customerServiceContact\" is required but got null");
        if (riskContact == null) throw new IllegalArgumentException("\"riskContact\" is required but got null");
        if (businessContact == null) throw new IllegalArgumentException("\"businessContact\" is required but got null");
        if (processingDetails == null) throw new IllegalArgumentException("\"processingDetails\" is required but got null");
        if (bankDetails == null) throw new IllegalArgumentException("\"bankDetails\" is required but got null");
        if (pricingStructure == null) throw new IllegalArgumentException("\"pricingStructure\" is required but got null");
        return new CreateNewApplicationRequestBuilder(isvName, businessDetails, customerServiceContact, riskContact, businessContact, processingDetails, bankDetails, pricingStructure);
    }
    private okhttp3.Call getApplicationDetailsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Application/Details/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationDetailsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getApplicationDetails(Async)");
        }

        return getApplicationDetailsCall(appId, _callback);

    }


    private ApiResponse<ApplicationDetailsResponse> getApplicationDetailsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getApplicationDetailsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<ApplicationDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicationDetailsAsync(String appId, final ApiCallback<ApplicationDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationDetailsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicationDetailsRequestBuilder {
        private final String appId;

        private GetApplicationDetailsRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for getApplicationDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicationDetailsCall(appId, _callback);
        }


        /**
         * Execute getApplicationDetails request
         * @return ApplicationDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationDetailsResponse execute() throws ApiException {
            ApiResponse<ApplicationDetailsResponse> localVarResp = getApplicationDetailsWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicationDetails request with HTTP info returned
         * @return ApiResponse&lt;ApplicationDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getApplicationDetailsWithHttpInfo(appId);
        }

        /**
         * Execute getApplicationDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationDetailsResponse> _callback) throws ApiException {
            return getApplicationDetailsAsync(appId, _callback);
        }
    }

    /**
     * Gets Details for an Application
     * 
     * @param appId  (required)
     * @return GetApplicationDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicationDetailsRequestBuilder getApplicationDetails(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetApplicationDetailsRequestBuilder(appId);
    }
    private okhttp3.Call getApplicationStatusCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Application/Status/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationStatusValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getApplicationStatus(Async)");
        }

        return getApplicationStatusCall(appId, _callback);

    }


    private ApiResponse<ApplicationStatusResponse> getApplicationStatusWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getApplicationStatusValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<ApplicationStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicationStatusAsync(String appId, final ApiCallback<ApplicationStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationStatusValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicationStatusRequestBuilder {
        private final String appId;

        private GetApplicationStatusRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for getApplicationStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicationStatusCall(appId, _callback);
        }


        /**
         * Execute getApplicationStatus request
         * @return ApplicationStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationStatusResponse execute() throws ApiException {
            ApiResponse<ApplicationStatusResponse> localVarResp = getApplicationStatusWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicationStatus request with HTTP info returned
         * @return ApiResponse&lt;ApplicationStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationStatusResponse> executeWithHttpInfo() throws ApiException {
            return getApplicationStatusWithHttpInfo(appId);
        }

        /**
         * Execute getApplicationStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationStatusResponse> _callback) throws ApiException {
            return getApplicationStatusAsync(appId, _callback);
        }
    }

    /**
     * Gets the Status of an Application
     * 
     * @param appId  (required)
     * @return GetApplicationStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicationStatusRequestBuilder getApplicationStatus(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetApplicationStatusRequestBuilder(appId);
    }
    private okhttp3.Call removeByIdCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Application/Delete/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeById(Async)");
        }

        return removeByIdCall(appId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String appId;

        private RemoveByIdRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(appId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(appId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(appId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(appId, _callback);
        }
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(appId);
    }
    private okhttp3.Call startUnderwritingProcessCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Application/StartUnderwriting/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startUnderwritingProcessValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling startUnderwritingProcess(Async)");
        }

        return startUnderwritingProcessCall(appId, _callback);

    }


    private ApiResponse<Void> startUnderwritingProcessWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = startUnderwritingProcessValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call startUnderwritingProcessAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startUnderwritingProcessValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StartUnderwritingProcessRequestBuilder {
        private final String appId;

        private StartUnderwritingProcessRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for startUnderwritingProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startUnderwritingProcessCall(appId, _callback);
        }


        /**
         * Execute startUnderwritingProcess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            startUnderwritingProcessWithHttpInfo(appId);
        }

        /**
         * Execute startUnderwritingProcess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return startUnderwritingProcessWithHttpInfo(appId);
        }

        /**
         * Execute startUnderwritingProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return startUnderwritingProcessAsync(appId, _callback);
        }
    }

    /**
     * Start Underwriting Process for an Application
     * 
     * @param appId  (required)
     * @return StartUnderwritingProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StartUnderwritingProcessRequestBuilder startUnderwritingProcess(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new StartUnderwritingProcessRequestBuilder(appId);
    }
}
