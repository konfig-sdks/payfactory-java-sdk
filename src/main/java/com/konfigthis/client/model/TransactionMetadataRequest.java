/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TransactionMetadataRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TransactionMetadataRequest {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_CARD_HOLDER_NAME = "cardHolderName";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER_NAME)
  private String cardHolderName;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PARTNER_FEE = "partnerFee";
  @SerializedName(SERIALIZED_NAME_PARTNER_FEE)
  private Double partnerFee;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "itemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  public TransactionMetadataRequest() {
  }

  public TransactionMetadataRequest transactionId(String transactionId) {
    
    
    if (transactionId != null && transactionId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for transactionId. Length must be greater than or equal to 1.");
    }
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The transaction Id from the payment processor
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The transaction Id from the payment processor")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    
    
    if (transactionId != null && transactionId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for transactionId. Length must be greater than or equal to 1.");
    }
    this.transactionId = transactionId;
  }


  public TransactionMetadataRequest merchantId(String merchantId) {
    
    
    if (merchantId != null && merchantId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for merchantId. Length must be greater than or equal to 1.");
    }
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Payfactoy&#39;s merchant Id
   * @return merchantId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4BCD-3FGH", required = true, value = "Payfactoy's merchant Id")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    
    
    if (merchantId != null && merchantId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for merchantId. Length must be greater than or equal to 1.");
    }
    this.merchantId = merchantId;
  }


  public TransactionMetadataRequest cardHolderName(String cardHolderName) {
    
    
    if (cardHolderName != null && cardHolderName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for cardHolderName. Length must be greater than or equal to 1.");
    }
    
    this.cardHolderName = cardHolderName;
    return this;
  }

   /**
   * Name of the Cardholder
   * @return cardHolderName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "John Doe", required = true, value = "Name of the Cardholder")

  public String getCardHolderName() {
    return cardHolderName;
  }


  public void setCardHolderName(String cardHolderName) {
    
    
    if (cardHolderName != null && cardHolderName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for cardHolderName. Length must be greater than or equal to 1.");
    }
    this.cardHolderName = cardHolderName;
  }


  public TransactionMetadataRequest externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Any identifier you choose to send
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "abcdef123456", value = "Any identifier you choose to send")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public TransactionMetadataRequest orderId(String orderId) {
    
    
    
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Any identifier you choose to send
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "321654987", value = "Any identifier you choose to send")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    
    
    
    this.orderId = orderId;
  }


  public TransactionMetadataRequest partnerFee(Double partnerFee) {
    
    
    
    
    this.partnerFee = partnerFee;
    return this;
  }

   /**
   * Required if partner is configured for the partner fee program
   * @return partnerFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.25", value = "Required if partner is configured for the partner fee program")

  public Double getPartnerFee() {
    return partnerFee;
  }


  public void setPartnerFee(Double partnerFee) {
    
    
    
    this.partnerFee = partnerFee;
  }


  public TransactionMetadataRequest itemCount(Integer itemCount) {
    
    
    
    
    this.itemCount = itemCount;
    return this;
  }

   /**
   * Number of items sold in the transaction
   * @return itemCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Number of items sold in the transaction")

  public Integer getItemCount() {
    return itemCount;
  }


  public void setItemCount(Integer itemCount) {
    
    
    
    this.itemCount = itemCount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionMetadataRequest instance itself
   */
  public TransactionMetadataRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionMetadataRequest transactionMetadataRequest = (TransactionMetadataRequest) o;
    return Objects.equals(this.transactionId, transactionMetadataRequest.transactionId) &&
        Objects.equals(this.merchantId, transactionMetadataRequest.merchantId) &&
        Objects.equals(this.cardHolderName, transactionMetadataRequest.cardHolderName) &&
        Objects.equals(this.externalId, transactionMetadataRequest.externalId) &&
        Objects.equals(this.orderId, transactionMetadataRequest.orderId) &&
        Objects.equals(this.partnerFee, transactionMetadataRequest.partnerFee) &&
        Objects.equals(this.itemCount, transactionMetadataRequest.itemCount)&&
        Objects.equals(this.additionalProperties, transactionMetadataRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, merchantId, cardHolderName, externalId, orderId, partnerFee, itemCount, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionMetadataRequest {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    cardHolderName: ").append(toIndentedString(cardHolderName)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    partnerFee: ").append(toIndentedString(partnerFee)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("merchantId");
    openapiFields.add("cardHolderName");
    openapiFields.add("externalId");
    openapiFields.add("orderId");
    openapiFields.add("partnerFee");
    openapiFields.add("itemCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("merchantId");
    openapiRequiredFields.add("cardHolderName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionMetadataRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionMetadataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionMetadataRequest is not found in the empty JSON string", TransactionMetadataRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionMetadataRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if (!jsonObj.get("cardHolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardHolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardHolderName").toString()));
      }
      if (!jsonObj.get("externalId").isJsonNull() && (jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if (!jsonObj.get("orderId").isJsonNull() && (jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionMetadataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionMetadataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionMetadataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionMetadataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionMetadataRequest>() {
           @Override
           public void write(JsonWriter out, TransactionMetadataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionMetadataRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TransactionMetadataRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionMetadataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionMetadataRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionMetadataRequest
  */
  public static TransactionMetadataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionMetadataRequest.class);
  }

 /**
  * Convert an instance of TransactionMetadataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

