/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AddressModel;
import com.konfigthis.client.model.ApplicationDetailsResponseCustomerServiceModel;
import com.konfigthis.client.model.ApplicationDetailsResponseSignerModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicationDetailsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicationDetailsResponse {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_DBA_NAME = "dbaName";
  @SerializedName(SERIALIZED_NAME_DBA_NAME)
  private String dbaName;

  public static final String SERIALIZED_NAME_OWNERSHIP_TYPE = "ownershipType";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_TYPE)
  private String ownershipType;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AddressModel address;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_CUSTOMER_SERVICE = "customerService";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SERVICE)
  private ApplicationDetailsResponseCustomerServiceModel customerService;

  public static final String SERIALIZED_NAME_SIGNER = "signer";
  @SerializedName(SERIALIZED_NAME_SIGNER)
  private ApplicationDetailsResponseSignerModel signer;

  public static final String SERIALIZED_NAME_MONTHLY_TRANSACTION_VOLUME = "monthlyTransactionVolume";
  @SerializedName(SERIALIZED_NAME_MONTHLY_TRANSACTION_VOLUME)
  private Integer monthlyTransactionVolume;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public ApplicationDetailsResponse() {
  }

  public ApplicationDetailsResponse appId(String appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * Get appId
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    
    
    
    this.appId = appId;
  }


  public ApplicationDetailsResponse externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public ApplicationDetailsResponse legalName(String legalName) {
    
    
    
    
    this.legalName = legalName;
    return this;
  }

   /**
   * Get legalName
   * @return legalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLegalName() {
    return legalName;
  }


  public void setLegalName(String legalName) {
    
    
    
    this.legalName = legalName;
  }


  public ApplicationDetailsResponse dbaName(String dbaName) {
    
    
    
    
    this.dbaName = dbaName;
    return this;
  }

   /**
   * Get dbaName
   * @return dbaName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDbaName() {
    return dbaName;
  }


  public void setDbaName(String dbaName) {
    
    
    
    this.dbaName = dbaName;
  }


  public ApplicationDetailsResponse ownershipType(String ownershipType) {
    
    
    
    
    this.ownershipType = ownershipType;
    return this;
  }

   /**
   * Get ownershipType
   * @return ownershipType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOwnershipType() {
    return ownershipType;
  }


  public void setOwnershipType(String ownershipType) {
    
    
    
    this.ownershipType = ownershipType;
  }


  public ApplicationDetailsResponse taxId(String taxId) {
    
    
    
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    
    this.taxId = taxId;
  }


  public ApplicationDetailsResponse address(AddressModel address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AddressModel getAddress() {
    return address;
  }


  public void setAddress(AddressModel address) {
    
    
    
    this.address = address;
  }


  public ApplicationDetailsResponse phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public ApplicationDetailsResponse website(String website) {
    
    
    
    
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    
    
    
    this.website = website;
  }


  public ApplicationDetailsResponse customerService(ApplicationDetailsResponseCustomerServiceModel customerService) {
    
    
    
    
    this.customerService = customerService;
    return this;
  }

   /**
   * Get customerService
   * @return customerService
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationDetailsResponseCustomerServiceModel getCustomerService() {
    return customerService;
  }


  public void setCustomerService(ApplicationDetailsResponseCustomerServiceModel customerService) {
    
    
    
    this.customerService = customerService;
  }


  public ApplicationDetailsResponse signer(ApplicationDetailsResponseSignerModel signer) {
    
    
    
    
    this.signer = signer;
    return this;
  }

   /**
   * Get signer
   * @return signer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationDetailsResponseSignerModel getSigner() {
    return signer;
  }


  public void setSigner(ApplicationDetailsResponseSignerModel signer) {
    
    
    
    this.signer = signer;
  }


  public ApplicationDetailsResponse monthlyTransactionVolume(Integer monthlyTransactionVolume) {
    
    
    
    
    this.monthlyTransactionVolume = monthlyTransactionVolume;
    return this;
  }

   /**
   * Get monthlyTransactionVolume
   * @return monthlyTransactionVolume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMonthlyTransactionVolume() {
    return monthlyTransactionVolume;
  }


  public void setMonthlyTransactionVolume(Integer monthlyTransactionVolume) {
    
    
    
    this.monthlyTransactionVolume = monthlyTransactionVolume;
  }


  public ApplicationDetailsResponse merchantCategoryCode(String merchantCategoryCode) {
    
    
    
    
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

   /**
   * Get merchantCategoryCode
   * @return merchantCategoryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }


  public void setMerchantCategoryCode(String merchantCategoryCode) {
    
    
    
    this.merchantCategoryCode = merchantCategoryCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicationDetailsResponse instance itself
   */
  public ApplicationDetailsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationDetailsResponse applicationDetailsResponse = (ApplicationDetailsResponse) o;
    return Objects.equals(this.appId, applicationDetailsResponse.appId) &&
        Objects.equals(this.externalId, applicationDetailsResponse.externalId) &&
        Objects.equals(this.legalName, applicationDetailsResponse.legalName) &&
        Objects.equals(this.dbaName, applicationDetailsResponse.dbaName) &&
        Objects.equals(this.ownershipType, applicationDetailsResponse.ownershipType) &&
        Objects.equals(this.taxId, applicationDetailsResponse.taxId) &&
        Objects.equals(this.address, applicationDetailsResponse.address) &&
        Objects.equals(this.phone, applicationDetailsResponse.phone) &&
        Objects.equals(this.website, applicationDetailsResponse.website) &&
        Objects.equals(this.customerService, applicationDetailsResponse.customerService) &&
        Objects.equals(this.signer, applicationDetailsResponse.signer) &&
        Objects.equals(this.monthlyTransactionVolume, applicationDetailsResponse.monthlyTransactionVolume) &&
        Objects.equals(this.merchantCategoryCode, applicationDetailsResponse.merchantCategoryCode)&&
        Objects.equals(this.additionalProperties, applicationDetailsResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, externalId, legalName, dbaName, ownershipType, taxId, address, phone, website, customerService, signer, monthlyTransactionVolume, merchantCategoryCode, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationDetailsResponse {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    dbaName: ").append(toIndentedString(dbaName)).append("\n");
    sb.append("    ownershipType: ").append(toIndentedString(ownershipType)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    customerService: ").append(toIndentedString(customerService)).append("\n");
    sb.append("    signer: ").append(toIndentedString(signer)).append("\n");
    sb.append("    monthlyTransactionVolume: ").append(toIndentedString(monthlyTransactionVolume)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("externalId");
    openapiFields.add("legalName");
    openapiFields.add("dbaName");
    openapiFields.add("ownershipType");
    openapiFields.add("taxId");
    openapiFields.add("address");
    openapiFields.add("phone");
    openapiFields.add("website");
    openapiFields.add("customerService");
    openapiFields.add("signer");
    openapiFields.add("monthlyTransactionVolume");
    openapiFields.add("merchantCategoryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicationDetailsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicationDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationDetailsResponse is not found in the empty JSON string", ApplicationDetailsResponse.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("appId").isJsonNull() && (jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("externalId").isJsonNull() && (jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if (!jsonObj.get("legalName").isJsonNull() && (jsonObj.get("legalName") != null && !jsonObj.get("legalName").isJsonNull()) && !jsonObj.get("legalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalName").toString()));
      }
      if (!jsonObj.get("dbaName").isJsonNull() && (jsonObj.get("dbaName") != null && !jsonObj.get("dbaName").isJsonNull()) && !jsonObj.get("dbaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbaName").toString()));
      }
      if (!jsonObj.get("ownershipType").isJsonNull() && (jsonObj.get("ownershipType") != null && !jsonObj.get("ownershipType").isJsonNull()) && !jsonObj.get("ownershipType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipType").toString()));
      }
      if (!jsonObj.get("taxId").isJsonNull() && (jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AddressModel.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if (!jsonObj.get("phone").isJsonNull() && (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("website").isJsonNull() && (jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      // validate the optional field `customerService`
      if (jsonObj.get("customerService") != null && !jsonObj.get("customerService").isJsonNull()) {
        ApplicationDetailsResponseCustomerServiceModel.validateJsonObject(jsonObj.getAsJsonObject("customerService"));
      }
      // validate the optional field `signer`
      if (jsonObj.get("signer") != null && !jsonObj.get("signer").isJsonNull()) {
        ApplicationDetailsResponseSignerModel.validateJsonObject(jsonObj.getAsJsonObject("signer"));
      }
      if (!jsonObj.get("merchantCategoryCode").isJsonNull() && (jsonObj.get("merchantCategoryCode") != null && !jsonObj.get("merchantCategoryCode").isJsonNull()) && !jsonObj.get("merchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategoryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationDetailsResponse>() {
           @Override
           public void write(JsonWriter out, ApplicationDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationDetailsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicationDetailsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicationDetailsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicationDetailsResponse
  * @throws IOException if the JSON string is invalid with respect to ApplicationDetailsResponse
  */
  public static ApplicationDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationDetailsResponse.class);
  }

 /**
  * Convert an instance of ApplicationDetailsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

