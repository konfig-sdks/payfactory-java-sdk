/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BankDetailsModel;
import com.konfigthis.client.model.BusinessDetailsModel;
import com.konfigthis.client.model.CustomerServiceContactModel;
import com.konfigthis.client.model.OwnerModel;
import com.konfigthis.client.model.PersonModel;
import com.konfigthis.client.model.PricingModel;
import com.konfigthis.client.model.ProcessingDetailsModel;
import com.konfigthis.client.model.RiskContactModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicationSubmitRequestModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicationSubmitRequestModel {
  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_ISV_NAME = "isvName";
  @SerializedName(SERIALIZED_NAME_ISV_NAME)
  private String isvName;

  public static final String SERIALIZED_NAME_BUSINESS_DETAILS = "businessDetails";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DETAILS)
  private BusinessDetailsModel businessDetails;

  public static final String SERIALIZED_NAME_CUSTOMER_SERVICE_CONTACT = "customerServiceContact";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SERVICE_CONTACT)
  private CustomerServiceContactModel customerServiceContact;

  public static final String SERIALIZED_NAME_RISK_CONTACT = "riskContact";
  @SerializedName(SERIALIZED_NAME_RISK_CONTACT)
  private RiskContactModel riskContact;

  public static final String SERIALIZED_NAME_BUSINESS_CONTACT = "businessContact";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CONTACT)
  private PersonModel businessContact;

  public static final String SERIALIZED_NAME_PROCESSING_DETAILS = "processingDetails";
  @SerializedName(SERIALIZED_NAME_PROCESSING_DETAILS)
  private ProcessingDetailsModel processingDetails;

  public static final String SERIALIZED_NAME_BANK_DETAILS = "bankDetails";
  @SerializedName(SERIALIZED_NAME_BANK_DETAILS)
  private BankDetailsModel bankDetails;

  public static final String SERIALIZED_NAME_PRICING_STRUCTURE = "pricingStructure";
  @SerializedName(SERIALIZED_NAME_PRICING_STRUCTURE)
  private PricingModel pricingStructure;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<OwnerModel> owners = null;

  public ApplicationSubmitRequestModel() {
  }

  public ApplicationSubmitRequestModel externalId(String externalId) {
    
    
    if (externalId != null && externalId.length() < 3) {
      throw new IllegalArgumentException("Invalid value for externalId. Length must be greater than or equal to 3.");
    }
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    if (externalId != null && externalId.length() < 3) {
      throw new IllegalArgumentException("Invalid value for externalId. Length must be greater than or equal to 3.");
    }
    this.externalId = externalId;
  }


  public ApplicationSubmitRequestModel isvName(String isvName) {
    
    
    if (isvName != null && isvName.length() < 3) {
      throw new IllegalArgumentException("Invalid value for isvName. Length must be greater than or equal to 3.");
    }
    
    this.isvName = isvName;
    return this;
  }

   /**
   * Get isvName
   * @return isvName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getIsvName() {
    return isvName;
  }


  public void setIsvName(String isvName) {
    
    
    if (isvName != null && isvName.length() < 3) {
      throw new IllegalArgumentException("Invalid value for isvName. Length must be greater than or equal to 3.");
    }
    this.isvName = isvName;
  }


  public ApplicationSubmitRequestModel businessDetails(BusinessDetailsModel businessDetails) {
    
    
    
    
    this.businessDetails = businessDetails;
    return this;
  }

   /**
   * Get businessDetails
   * @return businessDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BusinessDetailsModel getBusinessDetails() {
    return businessDetails;
  }


  public void setBusinessDetails(BusinessDetailsModel businessDetails) {
    
    
    
    this.businessDetails = businessDetails;
  }


  public ApplicationSubmitRequestModel customerServiceContact(CustomerServiceContactModel customerServiceContact) {
    
    
    
    
    this.customerServiceContact = customerServiceContact;
    return this;
  }

   /**
   * Get customerServiceContact
   * @return customerServiceContact
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CustomerServiceContactModel getCustomerServiceContact() {
    return customerServiceContact;
  }


  public void setCustomerServiceContact(CustomerServiceContactModel customerServiceContact) {
    
    
    
    this.customerServiceContact = customerServiceContact;
  }


  public ApplicationSubmitRequestModel riskContact(RiskContactModel riskContact) {
    
    
    
    
    this.riskContact = riskContact;
    return this;
  }

   /**
   * Get riskContact
   * @return riskContact
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RiskContactModel getRiskContact() {
    return riskContact;
  }


  public void setRiskContact(RiskContactModel riskContact) {
    
    
    
    this.riskContact = riskContact;
  }


  public ApplicationSubmitRequestModel businessContact(PersonModel businessContact) {
    
    
    
    
    this.businessContact = businessContact;
    return this;
  }

   /**
   * Get businessContact
   * @return businessContact
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PersonModel getBusinessContact() {
    return businessContact;
  }


  public void setBusinessContact(PersonModel businessContact) {
    
    
    
    this.businessContact = businessContact;
  }


  public ApplicationSubmitRequestModel processingDetails(ProcessingDetailsModel processingDetails) {
    
    
    
    
    this.processingDetails = processingDetails;
    return this;
  }

   /**
   * Get processingDetails
   * @return processingDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProcessingDetailsModel getProcessingDetails() {
    return processingDetails;
  }


  public void setProcessingDetails(ProcessingDetailsModel processingDetails) {
    
    
    
    this.processingDetails = processingDetails;
  }


  public ApplicationSubmitRequestModel bankDetails(BankDetailsModel bankDetails) {
    
    
    
    
    this.bankDetails = bankDetails;
    return this;
  }

   /**
   * Get bankDetails
   * @return bankDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BankDetailsModel getBankDetails() {
    return bankDetails;
  }


  public void setBankDetails(BankDetailsModel bankDetails) {
    
    
    
    this.bankDetails = bankDetails;
  }


  public ApplicationSubmitRequestModel pricingStructure(PricingModel pricingStructure) {
    
    
    
    
    this.pricingStructure = pricingStructure;
    return this;
  }

   /**
   * Get pricingStructure
   * @return pricingStructure
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PricingModel getPricingStructure() {
    return pricingStructure;
  }


  public void setPricingStructure(PricingModel pricingStructure) {
    
    
    
    this.pricingStructure = pricingStructure;
  }


  public ApplicationSubmitRequestModel owners(List<OwnerModel> owners) {
    
    
    
    
    this.owners = owners;
    return this;
  }

  public ApplicationSubmitRequestModel addOwnersItem(OwnerModel ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<>();
    }
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * Get owners
   * @return owners
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OwnerModel> getOwners() {
    return owners;
  }


  public void setOwners(List<OwnerModel> owners) {
    
    
    
    this.owners = owners;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicationSubmitRequestModel instance itself
   */
  public ApplicationSubmitRequestModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationSubmitRequestModel applicationSubmitRequestModel = (ApplicationSubmitRequestModel) o;
    return Objects.equals(this.externalId, applicationSubmitRequestModel.externalId) &&
        Objects.equals(this.isvName, applicationSubmitRequestModel.isvName) &&
        Objects.equals(this.businessDetails, applicationSubmitRequestModel.businessDetails) &&
        Objects.equals(this.customerServiceContact, applicationSubmitRequestModel.customerServiceContact) &&
        Objects.equals(this.riskContact, applicationSubmitRequestModel.riskContact) &&
        Objects.equals(this.businessContact, applicationSubmitRequestModel.businessContact) &&
        Objects.equals(this.processingDetails, applicationSubmitRequestModel.processingDetails) &&
        Objects.equals(this.bankDetails, applicationSubmitRequestModel.bankDetails) &&
        Objects.equals(this.pricingStructure, applicationSubmitRequestModel.pricingStructure) &&
        Objects.equals(this.owners, applicationSubmitRequestModel.owners)&&
        Objects.equals(this.additionalProperties, applicationSubmitRequestModel.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalId, isvName, businessDetails, customerServiceContact, riskContact, businessContact, processingDetails, bankDetails, pricingStructure, owners, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationSubmitRequestModel {\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    isvName: ").append(toIndentedString(isvName)).append("\n");
    sb.append("    businessDetails: ").append(toIndentedString(businessDetails)).append("\n");
    sb.append("    customerServiceContact: ").append(toIndentedString(customerServiceContact)).append("\n");
    sb.append("    riskContact: ").append(toIndentedString(riskContact)).append("\n");
    sb.append("    businessContact: ").append(toIndentedString(businessContact)).append("\n");
    sb.append("    processingDetails: ").append(toIndentedString(processingDetails)).append("\n");
    sb.append("    bankDetails: ").append(toIndentedString(bankDetails)).append("\n");
    sb.append("    pricingStructure: ").append(toIndentedString(pricingStructure)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalId");
    openapiFields.add("isvName");
    openapiFields.add("businessDetails");
    openapiFields.add("customerServiceContact");
    openapiFields.add("riskContact");
    openapiFields.add("businessContact");
    openapiFields.add("processingDetails");
    openapiFields.add("bankDetails");
    openapiFields.add("pricingStructure");
    openapiFields.add("owners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isvName");
    openapiRequiredFields.add("businessDetails");
    openapiRequiredFields.add("customerServiceContact");
    openapiRequiredFields.add("riskContact");
    openapiRequiredFields.add("businessContact");
    openapiRequiredFields.add("processingDetails");
    openapiRequiredFields.add("bankDetails");
    openapiRequiredFields.add("pricingStructure");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicationSubmitRequestModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicationSubmitRequestModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationSubmitRequestModel is not found in the empty JSON string", ApplicationSubmitRequestModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationSubmitRequestModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("externalId").isJsonNull() && (jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if (!jsonObj.get("isvName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isvName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isvName").toString()));
      }
      // validate the required field `businessDetails`
      BusinessDetailsModel.validateJsonObject(jsonObj.getAsJsonObject("businessDetails"));
      // validate the required field `customerServiceContact`
      CustomerServiceContactModel.validateJsonObject(jsonObj.getAsJsonObject("customerServiceContact"));
      // validate the required field `riskContact`
      RiskContactModel.validateJsonObject(jsonObj.getAsJsonObject("riskContact"));
      // validate the required field `businessContact`
      PersonModel.validateJsonObject(jsonObj.getAsJsonObject("businessContact"));
      // validate the required field `processingDetails`
      ProcessingDetailsModel.validateJsonObject(jsonObj.getAsJsonObject("processingDetails"));
      // validate the required field `bankDetails`
      BankDetailsModel.validateJsonObject(jsonObj.getAsJsonObject("bankDetails"));
      // validate the required field `pricingStructure`
      PricingModel.validateJsonObject(jsonObj.getAsJsonObject("pricingStructure"));
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        JsonArray jsonArrayowners = jsonObj.getAsJsonArray("owners");
        if (jsonArrayowners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("owners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
          }

          // validate the optional field `owners` (array)
          for (int i = 0; i < jsonArrayowners.size(); i++) {
            OwnerModel.validateJsonObject(jsonArrayowners.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationSubmitRequestModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationSubmitRequestModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationSubmitRequestModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationSubmitRequestModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationSubmitRequestModel>() {
           @Override
           public void write(JsonWriter out, ApplicationSubmitRequestModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationSubmitRequestModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicationSubmitRequestModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicationSubmitRequestModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicationSubmitRequestModel
  * @throws IOException if the JSON string is invalid with respect to ApplicationSubmitRequestModel
  */
  public static ApplicationSubmitRequestModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationSubmitRequestModel.class);
  }

 /**
  * Convert an instance of ApplicationSubmitRequestModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

