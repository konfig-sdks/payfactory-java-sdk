/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProcessingDetailsModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProcessingDetailsModel {
  public static final String SERIALIZED_NAME_BILLING_DESCRIPTOR = "billingDescriptor";
  @SerializedName(SERIALIZED_NAME_BILLING_DESCRIPTOR)
  private String billingDescriptor;

  public static final String SERIALIZED_NAME_MONTHLY_TRANSACTION_VOLUME = "monthlyTransactionVolume";
  @SerializedName(SERIALIZED_NAME_MONTHLY_TRANSACTION_VOLUME)
  private Integer monthlyTransactionVolume;

  public static final String SERIALIZED_NAME_LOW_TRANSACTION_AMOUNT = "lowTransactionAmount";
  @SerializedName(SERIALIZED_NAME_LOW_TRANSACTION_AMOUNT)
  private Integer lowTransactionAmount;

  public static final String SERIALIZED_NAME_AVERAGE_TRANSACTION_AMOUNT = "averageTransactionAmount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_TRANSACTION_AMOUNT)
  private Integer averageTransactionAmount;

  public static final String SERIALIZED_NAME_HIGH_TRANSACTION_AMOUNT = "highTransactionAmount";
  @SerializedName(SERIALIZED_NAME_HIGH_TRANSACTION_AMOUNT)
  private Integer highTransactionAmount;

  public static final String SERIALIZED_NAME_DAILY_TRANSACTION_COUNT = "dailyTransactionCount";
  @SerializedName(SERIALIZED_NAME_DAILY_TRANSACTION_COUNT)
  private Integer dailyTransactionCount;

  public static final String SERIALIZED_NAME_CARD_NOT_PRESENT_PERCTANGE = "cardNotPresentPerctange";
  @SerializedName(SERIALIZED_NAME_CARD_NOT_PRESENT_PERCTANGE)
  private Integer cardNotPresentPerctange;

  public static final String SERIALIZED_NAME_CARD_PRESENT_PERCTANGE = "cardPresentPerctange";
  @SerializedName(SERIALIZED_NAME_CARD_PRESENT_PERCTANGE)
  private Integer cardPresentPerctange;

  public ProcessingDetailsModel() {
  }

  public ProcessingDetailsModel billingDescriptor(String billingDescriptor) {
    
    
    if (billingDescriptor != null && billingDescriptor.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingDescriptor. Length must be greater than or equal to 1.");
    }
    
    this.billingDescriptor = billingDescriptor;
    return this;
  }

   /**
   * Get billingDescriptor
   * @return billingDescriptor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACME_WEST_POS", required = true, value = "")

  public String getBillingDescriptor() {
    return billingDescriptor;
  }


  public void setBillingDescriptor(String billingDescriptor) {
    
    
    if (billingDescriptor != null && billingDescriptor.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingDescriptor. Length must be greater than or equal to 1.");
    }
    this.billingDescriptor = billingDescriptor;
  }


  public ProcessingDetailsModel monthlyTransactionVolume(Integer monthlyTransactionVolume) {
    if (monthlyTransactionVolume != null && monthlyTransactionVolume < 1) {
      throw new IllegalArgumentException("Invalid value for monthlyTransactionVolume. Must be greater than or equal to 1.");
    }
    if (monthlyTransactionVolume != null && monthlyTransactionVolume > 999999999) {
      throw new IllegalArgumentException("Invalid value for monthlyTransactionVolume. Must be less than or equal to 999999999.");
    }
    
    
    this.monthlyTransactionVolume = monthlyTransactionVolume;
    return this;
  }

   /**
   * Get monthlyTransactionVolume
   * minimum: 1
   * maximum: 999999999
   * @return monthlyTransactionVolume
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000", required = true, value = "")

  public Integer getMonthlyTransactionVolume() {
    return monthlyTransactionVolume;
  }


  public void setMonthlyTransactionVolume(Integer monthlyTransactionVolume) {
    if (monthlyTransactionVolume != null && monthlyTransactionVolume < 1) {
      throw new IllegalArgumentException("Invalid value for monthlyTransactionVolume. Must be greater than or equal to 1.");
    }
    if (monthlyTransactionVolume != null && monthlyTransactionVolume > 999999999) {
      throw new IllegalArgumentException("Invalid value for monthlyTransactionVolume. Must be less than or equal to 999999999.");
    }
    
    this.monthlyTransactionVolume = monthlyTransactionVolume;
  }


  public ProcessingDetailsModel lowTransactionAmount(Integer lowTransactionAmount) {
    if (lowTransactionAmount != null && lowTransactionAmount < 1) {
      throw new IllegalArgumentException("Invalid value for lowTransactionAmount. Must be greater than or equal to 1.");
    }
    if (lowTransactionAmount != null && lowTransactionAmount > 999999999) {
      throw new IllegalArgumentException("Invalid value for lowTransactionAmount. Must be less than or equal to 999999999.");
    }
    
    
    this.lowTransactionAmount = lowTransactionAmount;
    return this;
  }

   /**
   * Get lowTransactionAmount
   * minimum: 1
   * maximum: 999999999
   * @return lowTransactionAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2000", required = true, value = "")

  public Integer getLowTransactionAmount() {
    return lowTransactionAmount;
  }


  public void setLowTransactionAmount(Integer lowTransactionAmount) {
    if (lowTransactionAmount != null && lowTransactionAmount < 1) {
      throw new IllegalArgumentException("Invalid value for lowTransactionAmount. Must be greater than or equal to 1.");
    }
    if (lowTransactionAmount != null && lowTransactionAmount > 999999999) {
      throw new IllegalArgumentException("Invalid value for lowTransactionAmount. Must be less than or equal to 999999999.");
    }
    
    this.lowTransactionAmount = lowTransactionAmount;
  }


  public ProcessingDetailsModel averageTransactionAmount(Integer averageTransactionAmount) {
    if (averageTransactionAmount != null && averageTransactionAmount < 1) {
      throw new IllegalArgumentException("Invalid value for averageTransactionAmount. Must be greater than or equal to 1.");
    }
    if (averageTransactionAmount != null && averageTransactionAmount > 999999999) {
      throw new IllegalArgumentException("Invalid value for averageTransactionAmount. Must be less than or equal to 999999999.");
    }
    
    
    this.averageTransactionAmount = averageTransactionAmount;
    return this;
  }

   /**
   * Get averageTransactionAmount
   * minimum: 1
   * maximum: 999999999
   * @return averageTransactionAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3000", required = true, value = "")

  public Integer getAverageTransactionAmount() {
    return averageTransactionAmount;
  }


  public void setAverageTransactionAmount(Integer averageTransactionAmount) {
    if (averageTransactionAmount != null && averageTransactionAmount < 1) {
      throw new IllegalArgumentException("Invalid value for averageTransactionAmount. Must be greater than or equal to 1.");
    }
    if (averageTransactionAmount != null && averageTransactionAmount > 999999999) {
      throw new IllegalArgumentException("Invalid value for averageTransactionAmount. Must be less than or equal to 999999999.");
    }
    
    this.averageTransactionAmount = averageTransactionAmount;
  }


  public ProcessingDetailsModel highTransactionAmount(Integer highTransactionAmount) {
    if (highTransactionAmount != null && highTransactionAmount < 1) {
      throw new IllegalArgumentException("Invalid value for highTransactionAmount. Must be greater than or equal to 1.");
    }
    if (highTransactionAmount != null && highTransactionAmount > 999999999) {
      throw new IllegalArgumentException("Invalid value for highTransactionAmount. Must be less than or equal to 999999999.");
    }
    
    
    this.highTransactionAmount = highTransactionAmount;
    return this;
  }

   /**
   * Get highTransactionAmount
   * minimum: 1
   * maximum: 999999999
   * @return highTransactionAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4000", required = true, value = "")

  public Integer getHighTransactionAmount() {
    return highTransactionAmount;
  }


  public void setHighTransactionAmount(Integer highTransactionAmount) {
    if (highTransactionAmount != null && highTransactionAmount < 1) {
      throw new IllegalArgumentException("Invalid value for highTransactionAmount. Must be greater than or equal to 1.");
    }
    if (highTransactionAmount != null && highTransactionAmount > 999999999) {
      throw new IllegalArgumentException("Invalid value for highTransactionAmount. Must be less than or equal to 999999999.");
    }
    
    this.highTransactionAmount = highTransactionAmount;
  }


  public ProcessingDetailsModel dailyTransactionCount(Integer dailyTransactionCount) {
    if (dailyTransactionCount != null && dailyTransactionCount < 1) {
      throw new IllegalArgumentException("Invalid value for dailyTransactionCount. Must be greater than or equal to 1.");
    }
    if (dailyTransactionCount != null && dailyTransactionCount > 999999999) {
      throw new IllegalArgumentException("Invalid value for dailyTransactionCount. Must be less than or equal to 999999999.");
    }
    
    
    this.dailyTransactionCount = dailyTransactionCount;
    return this;
  }

   /**
   * Get dailyTransactionCount
   * minimum: 1
   * maximum: 999999999
   * @return dailyTransactionCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5000", required = true, value = "")

  public Integer getDailyTransactionCount() {
    return dailyTransactionCount;
  }


  public void setDailyTransactionCount(Integer dailyTransactionCount) {
    if (dailyTransactionCount != null && dailyTransactionCount < 1) {
      throw new IllegalArgumentException("Invalid value for dailyTransactionCount. Must be greater than or equal to 1.");
    }
    if (dailyTransactionCount != null && dailyTransactionCount > 999999999) {
      throw new IllegalArgumentException("Invalid value for dailyTransactionCount. Must be less than or equal to 999999999.");
    }
    
    this.dailyTransactionCount = dailyTransactionCount;
  }


  public ProcessingDetailsModel cardNotPresentPerctange(Integer cardNotPresentPerctange) {
    if (cardNotPresentPerctange != null && cardNotPresentPerctange < 0) {
      throw new IllegalArgumentException("Invalid value for cardNotPresentPerctange. Must be greater than or equal to 0.");
    }
    if (cardNotPresentPerctange != null && cardNotPresentPerctange > 100) {
      throw new IllegalArgumentException("Invalid value for cardNotPresentPerctange. Must be less than or equal to 100.");
    }
    
    
    this.cardNotPresentPerctange = cardNotPresentPerctange;
    return this;
  }

   /**
   * Get cardNotPresentPerctange
   * minimum: 0
   * maximum: 100
   * @return cardNotPresentPerctange
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "90", required = true, value = "")

  public Integer getCardNotPresentPerctange() {
    return cardNotPresentPerctange;
  }


  public void setCardNotPresentPerctange(Integer cardNotPresentPerctange) {
    if (cardNotPresentPerctange != null && cardNotPresentPerctange < 0) {
      throw new IllegalArgumentException("Invalid value for cardNotPresentPerctange. Must be greater than or equal to 0.");
    }
    if (cardNotPresentPerctange != null && cardNotPresentPerctange > 100) {
      throw new IllegalArgumentException("Invalid value for cardNotPresentPerctange. Must be less than or equal to 100.");
    }
    
    this.cardNotPresentPerctange = cardNotPresentPerctange;
  }


  public ProcessingDetailsModel cardPresentPerctange(Integer cardPresentPerctange) {
    if (cardPresentPerctange != null && cardPresentPerctange < 0) {
      throw new IllegalArgumentException("Invalid value for cardPresentPerctange. Must be greater than or equal to 0.");
    }
    if (cardPresentPerctange != null && cardPresentPerctange > 100) {
      throw new IllegalArgumentException("Invalid value for cardPresentPerctange. Must be less than or equal to 100.");
    }
    
    
    this.cardPresentPerctange = cardPresentPerctange;
    return this;
  }

   /**
   * Get cardPresentPerctange
   * minimum: 0
   * maximum: 100
   * @return cardPresentPerctange
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "")

  public Integer getCardPresentPerctange() {
    return cardPresentPerctange;
  }


  public void setCardPresentPerctange(Integer cardPresentPerctange) {
    if (cardPresentPerctange != null && cardPresentPerctange < 0) {
      throw new IllegalArgumentException("Invalid value for cardPresentPerctange. Must be greater than or equal to 0.");
    }
    if (cardPresentPerctange != null && cardPresentPerctange > 100) {
      throw new IllegalArgumentException("Invalid value for cardPresentPerctange. Must be less than or equal to 100.");
    }
    
    this.cardPresentPerctange = cardPresentPerctange;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProcessingDetailsModel instance itself
   */
  public ProcessingDetailsModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingDetailsModel processingDetailsModel = (ProcessingDetailsModel) o;
    return Objects.equals(this.billingDescriptor, processingDetailsModel.billingDescriptor) &&
        Objects.equals(this.monthlyTransactionVolume, processingDetailsModel.monthlyTransactionVolume) &&
        Objects.equals(this.lowTransactionAmount, processingDetailsModel.lowTransactionAmount) &&
        Objects.equals(this.averageTransactionAmount, processingDetailsModel.averageTransactionAmount) &&
        Objects.equals(this.highTransactionAmount, processingDetailsModel.highTransactionAmount) &&
        Objects.equals(this.dailyTransactionCount, processingDetailsModel.dailyTransactionCount) &&
        Objects.equals(this.cardNotPresentPerctange, processingDetailsModel.cardNotPresentPerctange) &&
        Objects.equals(this.cardPresentPerctange, processingDetailsModel.cardPresentPerctange)&&
        Objects.equals(this.additionalProperties, processingDetailsModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingDescriptor, monthlyTransactionVolume, lowTransactionAmount, averageTransactionAmount, highTransactionAmount, dailyTransactionCount, cardNotPresentPerctange, cardPresentPerctange, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingDetailsModel {\n");
    sb.append("    billingDescriptor: ").append(toIndentedString(billingDescriptor)).append("\n");
    sb.append("    monthlyTransactionVolume: ").append(toIndentedString(monthlyTransactionVolume)).append("\n");
    sb.append("    lowTransactionAmount: ").append(toIndentedString(lowTransactionAmount)).append("\n");
    sb.append("    averageTransactionAmount: ").append(toIndentedString(averageTransactionAmount)).append("\n");
    sb.append("    highTransactionAmount: ").append(toIndentedString(highTransactionAmount)).append("\n");
    sb.append("    dailyTransactionCount: ").append(toIndentedString(dailyTransactionCount)).append("\n");
    sb.append("    cardNotPresentPerctange: ").append(toIndentedString(cardNotPresentPerctange)).append("\n");
    sb.append("    cardPresentPerctange: ").append(toIndentedString(cardPresentPerctange)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingDescriptor");
    openapiFields.add("monthlyTransactionVolume");
    openapiFields.add("lowTransactionAmount");
    openapiFields.add("averageTransactionAmount");
    openapiFields.add("highTransactionAmount");
    openapiFields.add("dailyTransactionCount");
    openapiFields.add("cardNotPresentPerctange");
    openapiFields.add("cardPresentPerctange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billingDescriptor");
    openapiRequiredFields.add("monthlyTransactionVolume");
    openapiRequiredFields.add("lowTransactionAmount");
    openapiRequiredFields.add("averageTransactionAmount");
    openapiRequiredFields.add("highTransactionAmount");
    openapiRequiredFields.add("dailyTransactionCount");
    openapiRequiredFields.add("cardNotPresentPerctange");
    openapiRequiredFields.add("cardPresentPerctange");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProcessingDetailsModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProcessingDetailsModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessingDetailsModel is not found in the empty JSON string", ProcessingDetailsModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProcessingDetailsModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("billingDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingDescriptor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessingDetailsModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessingDetailsModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessingDetailsModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessingDetailsModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessingDetailsModel>() {
           @Override
           public void write(JsonWriter out, ProcessingDetailsModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessingDetailsModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProcessingDetailsModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProcessingDetailsModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProcessingDetailsModel
  * @throws IOException if the JSON string is invalid with respect to ProcessingDetailsModel
  */
  public static ProcessingDetailsModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessingDetailsModel.class);
  }

 /**
  * Convert an instance of ProcessingDetailsModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

