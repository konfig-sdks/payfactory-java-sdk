/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AddressModel;
import com.konfigthis.client.model.OwnershipTypeEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BusinessDetailsModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BusinessDetailsModel {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AddressModel address;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ESTABLISHED_DATE = "establishedDate";
  @SerializedName(SERIALIZED_NAME_ESTABLISHED_DATE)
  private LocalDate establishedDate;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_DBA_NAME = "dbaName";
  @SerializedName(SERIALIZED_NAME_DBA_NAME)
  private String dbaName;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private Integer mcc;

  public static final String SERIALIZED_NAME_OWNERSHIP_TYPE = "ownershipType";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_TYPE)
  private OwnershipTypeEnum ownershipType;

  public BusinessDetailsModel() {
  }

  public BusinessDetailsModel address(AddressModel address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AddressModel getAddress() {
    return address;
  }


  public void setAddress(AddressModel address) {
    
    
    
    this.address = address;
  }


  public BusinessDetailsModel phone(String phone) {
    
    
    if (phone != null && phone.length() < 1) {
      throw new IllegalArgumentException("Invalid value for phone. Length must be greater than or equal to 1.");
    }
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5551234567", required = true, value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    if (phone != null && phone.length() < 1) {
      throw new IllegalArgumentException("Invalid value for phone. Length must be greater than or equal to 1.");
    }
    this.phone = phone;
  }


  public BusinessDetailsModel establishedDate(LocalDate establishedDate) {
    
    
    
    
    this.establishedDate = establishedDate;
    return this;
  }

   /**
   * Date your business was established
   * @return establishedDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Mon Feb 02 16:00:00 PST 1959", required = true, value = "Date your business was established")

  public LocalDate getEstablishedDate() {
    return establishedDate;
  }


  public void setEstablishedDate(LocalDate establishedDate) {
    
    
    
    this.establishedDate = establishedDate;
  }


  public BusinessDetailsModel legalName(String legalName) {
    
    
    if (legalName != null && legalName.length() < 3) {
      throw new IllegalArgumentException("Invalid value for legalName. Length must be greater than or equal to 3.");
    }
    
    this.legalName = legalName;
    return this;
  }

   /**
   * Legal name of your business
   * @return legalName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACME LLC.", required = true, value = "Legal name of your business")

  public String getLegalName() {
    return legalName;
  }


  public void setLegalName(String legalName) {
    
    
    if (legalName != null && legalName.length() < 3) {
      throw new IllegalArgumentException("Invalid value for legalName. Length must be greater than or equal to 3.");
    }
    this.legalName = legalName;
  }


  public BusinessDetailsModel dbaName(String dbaName) {
    
    
    if (dbaName != null && dbaName.length() < 3) {
      throw new IllegalArgumentException("Invalid value for dbaName. Length must be greater than or equal to 3.");
    }
    
    this.dbaName = dbaName;
    return this;
  }

   /**
   * The name you are doing business as
   * @return dbaName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACME", required = true, value = "The name you are doing business as")

  public String getDbaName() {
    return dbaName;
  }


  public void setDbaName(String dbaName) {
    
    
    if (dbaName != null && dbaName.length() < 3) {
      throw new IllegalArgumentException("Invalid value for dbaName. Length must be greater than or equal to 3.");
    }
    this.dbaName = dbaName;
  }


  public BusinessDetailsModel taxId(String taxId) {
    
    
    if (taxId != null && taxId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for taxId. Length must be greater than or equal to 1.");
    }
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Federal Tax Id
   * @return taxId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123456789", required = true, value = "Federal Tax Id")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    if (taxId != null && taxId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for taxId. Length must be greater than or equal to 1.");
    }
    this.taxId = taxId;
  }


  public BusinessDetailsModel website(String website) {
    
    
    if (website != null && website.length() < 1) {
      throw new IllegalArgumentException("Invalid value for website. Length must be greater than or equal to 1.");
    }
    
    this.website = website;
    return this;
  }

   /**
   * Company website
   * @return website
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://www.acme.com", required = true, value = "Company website")

  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    
    
    if (website != null && website.length() < 1) {
      throw new IllegalArgumentException("Invalid value for website. Length must be greater than or equal to 1.");
    }
    this.website = website;
  }


  public BusinessDetailsModel mcc(Integer mcc) {
    if (mcc != null && mcc < 1) {
      throw new IllegalArgumentException("Invalid value for mcc. Must be greater than or equal to 1.");
    }
    if (mcc != null && mcc > 9999) {
      throw new IllegalArgumentException("Invalid value for mcc. Must be less than or equal to 9999.");
    }
    
    
    this.mcc = mcc;
    return this;
  }

   /**
   * Merchant Category Code
   * minimum: 1
   * maximum: 9999
   * @return mcc
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "7297", required = true, value = "Merchant Category Code")

  public Integer getMcc() {
    return mcc;
  }


  public void setMcc(Integer mcc) {
    if (mcc != null && mcc < 1) {
      throw new IllegalArgumentException("Invalid value for mcc. Must be greater than or equal to 1.");
    }
    if (mcc != null && mcc > 9999) {
      throw new IllegalArgumentException("Invalid value for mcc. Must be less than or equal to 9999.");
    }
    
    this.mcc = mcc;
  }


  public BusinessDetailsModel ownershipType(OwnershipTypeEnum ownershipType) {
    
    
    
    
    this.ownershipType = ownershipType;
    return this;
  }

   /**
   * Get ownershipType
   * @return ownershipType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OwnershipTypeEnum getOwnershipType() {
    return ownershipType;
  }


  public void setOwnershipType(OwnershipTypeEnum ownershipType) {
    
    
    
    this.ownershipType = ownershipType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BusinessDetailsModel instance itself
   */
  public BusinessDetailsModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDetailsModel businessDetailsModel = (BusinessDetailsModel) o;
    return Objects.equals(this.address, businessDetailsModel.address) &&
        Objects.equals(this.phone, businessDetailsModel.phone) &&
        Objects.equals(this.establishedDate, businessDetailsModel.establishedDate) &&
        Objects.equals(this.legalName, businessDetailsModel.legalName) &&
        Objects.equals(this.dbaName, businessDetailsModel.dbaName) &&
        Objects.equals(this.taxId, businessDetailsModel.taxId) &&
        Objects.equals(this.website, businessDetailsModel.website) &&
        Objects.equals(this.mcc, businessDetailsModel.mcc) &&
        Objects.equals(this.ownershipType, businessDetailsModel.ownershipType)&&
        Objects.equals(this.additionalProperties, businessDetailsModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, phone, establishedDate, legalName, dbaName, taxId, website, mcc, ownershipType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDetailsModel {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    establishedDate: ").append(toIndentedString(establishedDate)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    dbaName: ").append(toIndentedString(dbaName)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    ownershipType: ").append(toIndentedString(ownershipType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("phone");
    openapiFields.add("establishedDate");
    openapiFields.add("legalName");
    openapiFields.add("dbaName");
    openapiFields.add("taxId");
    openapiFields.add("website");
    openapiFields.add("mcc");
    openapiFields.add("ownershipType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("establishedDate");
    openapiRequiredFields.add("legalName");
    openapiRequiredFields.add("dbaName");
    openapiRequiredFields.add("taxId");
    openapiRequiredFields.add("website");
    openapiRequiredFields.add("mcc");
    openapiRequiredFields.add("ownershipType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BusinessDetailsModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BusinessDetailsModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessDetailsModel is not found in the empty JSON string", BusinessDetailsModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BusinessDetailsModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `address`
      AddressModel.validateJsonObject(jsonObj.getAsJsonObject("address"));
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("legalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalName").toString()));
      }
      if (!jsonObj.get("dbaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbaName").toString()));
      }
      if (!jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if (!jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessDetailsModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessDetailsModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessDetailsModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessDetailsModel.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessDetailsModel>() {
           @Override
           public void write(JsonWriter out, BusinessDetailsModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessDetailsModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BusinessDetailsModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessDetailsModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessDetailsModel
  * @throws IOException if the JSON string is invalid with respect to BusinessDetailsModel
  */
  public static BusinessDetailsModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessDetailsModel.class);
  }

 /**
  * Convert an instance of BusinessDetailsModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

