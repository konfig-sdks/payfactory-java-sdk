/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PricingModelBillingFrequencyEnum;
import com.konfigthis.client.model.PricingModelPricingStructureCardModel;
import com.konfigthis.client.model.PricingProgramEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PricingModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PricingModel {
  public static final String SERIALIZED_NAME_AMEX = "amex";
  @SerializedName(SERIALIZED_NAME_AMEX)
  private PricingModelPricingStructureCardModel amex;

  public static final String SERIALIZED_NAME_VISA_MASTER_CARD = "visaMasterCard";
  @SerializedName(SERIALIZED_NAME_VISA_MASTER_CARD)
  private PricingModelPricingStructureCardModel visaMasterCard;

  public static final String SERIALIZED_NAME_DISCOVER = "discover";
  @SerializedName(SERIALIZED_NAME_DISCOVER)
  private PricingModelPricingStructureCardModel discover;

  public static final String SERIALIZED_NAME_MONTHLY_FEE = "monthlyFee";
  @SerializedName(SERIALIZED_NAME_MONTHLY_FEE)
  private Double monthlyFee;

  public static final String SERIALIZED_NAME_BILLING_FREQUENCY = "billingFrequency";
  @SerializedName(SERIALIZED_NAME_BILLING_FREQUENCY)
  private PricingModelBillingFrequencyEnum billingFrequency;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private PricingProgramEnum program;

  public PricingModel() {
  }

  public PricingModel amex(PricingModelPricingStructureCardModel amex) {
    
    
    
    
    this.amex = amex;
    return this;
  }

   /**
   * Get amex
   * @return amex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PricingModelPricingStructureCardModel getAmex() {
    return amex;
  }


  public void setAmex(PricingModelPricingStructureCardModel amex) {
    
    
    
    this.amex = amex;
  }


  public PricingModel visaMasterCard(PricingModelPricingStructureCardModel visaMasterCard) {
    
    
    
    
    this.visaMasterCard = visaMasterCard;
    return this;
  }

   /**
   * Get visaMasterCard
   * @return visaMasterCard
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PricingModelPricingStructureCardModel getVisaMasterCard() {
    return visaMasterCard;
  }


  public void setVisaMasterCard(PricingModelPricingStructureCardModel visaMasterCard) {
    
    
    
    this.visaMasterCard = visaMasterCard;
  }


  public PricingModel discover(PricingModelPricingStructureCardModel discover) {
    
    
    
    
    this.discover = discover;
    return this;
  }

   /**
   * Get discover
   * @return discover
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PricingModelPricingStructureCardModel getDiscover() {
    return discover;
  }


  public void setDiscover(PricingModelPricingStructureCardModel discover) {
    
    
    
    this.discover = discover;
  }


  public PricingModel monthlyFee(Double monthlyFee) {
    if (monthlyFee != null && monthlyFee < 0) {
      throw new IllegalArgumentException("Invalid value for monthlyFee. Must be greater than or equal to 0.");
    }
    if (monthlyFee != null && monthlyFee > 100) {
      throw new IllegalArgumentException("Invalid value for monthlyFee. Must be less than or equal to 100.");
    }
    
    
    this.monthlyFee = monthlyFee;
    return this;
  }

   /**
   * Get monthlyFee
   * minimum: 0
   * maximum: 100
   * @return monthlyFee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "25", required = true, value = "")

  public Double getMonthlyFee() {
    return monthlyFee;
  }


  public void setMonthlyFee(Double monthlyFee) {
    if (monthlyFee != null && monthlyFee < 0) {
      throw new IllegalArgumentException("Invalid value for monthlyFee. Must be greater than or equal to 0.");
    }
    if (monthlyFee != null && monthlyFee > 100) {
      throw new IllegalArgumentException("Invalid value for monthlyFee. Must be less than or equal to 100.");
    }
    
    this.monthlyFee = monthlyFee;
  }


  public PricingModel billingFrequency(PricingModelBillingFrequencyEnum billingFrequency) {
    
    
    
    
    this.billingFrequency = billingFrequency;
    return this;
  }

   /**
   * Get billingFrequency
   * @return billingFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PricingModelBillingFrequencyEnum getBillingFrequency() {
    return billingFrequency;
  }


  public void setBillingFrequency(PricingModelBillingFrequencyEnum billingFrequency) {
    
    
    
    this.billingFrequency = billingFrequency;
  }


  public PricingModel program(PricingProgramEnum program) {
    
    
    
    
    this.program = program;
    return this;
  }

   /**
   * Get program
   * @return program
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PricingProgramEnum getProgram() {
    return program;
  }


  public void setProgram(PricingProgramEnum program) {
    
    
    
    this.program = program;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PricingModel instance itself
   */
  public PricingModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingModel pricingModel = (PricingModel) o;
    return Objects.equals(this.amex, pricingModel.amex) &&
        Objects.equals(this.visaMasterCard, pricingModel.visaMasterCard) &&
        Objects.equals(this.discover, pricingModel.discover) &&
        Objects.equals(this.monthlyFee, pricingModel.monthlyFee) &&
        Objects.equals(this.billingFrequency, pricingModel.billingFrequency) &&
        Objects.equals(this.program, pricingModel.program)&&
        Objects.equals(this.additionalProperties, pricingModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amex, visaMasterCard, discover, monthlyFee, billingFrequency, program, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingModel {\n");
    sb.append("    amex: ").append(toIndentedString(amex)).append("\n");
    sb.append("    visaMasterCard: ").append(toIndentedString(visaMasterCard)).append("\n");
    sb.append("    discover: ").append(toIndentedString(discover)).append("\n");
    sb.append("    monthlyFee: ").append(toIndentedString(monthlyFee)).append("\n");
    sb.append("    billingFrequency: ").append(toIndentedString(billingFrequency)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amex");
    openapiFields.add("visaMasterCard");
    openapiFields.add("discover");
    openapiFields.add("monthlyFee");
    openapiFields.add("billingFrequency");
    openapiFields.add("program");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amex");
    openapiRequiredFields.add("visaMasterCard");
    openapiRequiredFields.add("discover");
    openapiRequiredFields.add("monthlyFee");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PricingModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PricingModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingModel is not found in the empty JSON string", PricingModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PricingModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `amex`
      PricingModelPricingStructureCardModel.validateJsonObject(jsonObj.getAsJsonObject("amex"));
      // validate the required field `visaMasterCard`
      PricingModelPricingStructureCardModel.validateJsonObject(jsonObj.getAsJsonObject("visaMasterCard"));
      // validate the required field `discover`
      PricingModelPricingStructureCardModel.validateJsonObject(jsonObj.getAsJsonObject("discover"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingModel>() {
           @Override
           public void write(JsonWriter out, PricingModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PricingModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PricingModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PricingModel
  * @throws IOException if the JSON string is invalid with respect to PricingModel
  */
  public static PricingModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingModel.class);
  }

 /**
  * Convert an instance of PricingModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

