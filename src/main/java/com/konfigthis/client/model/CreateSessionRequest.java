/*
 * Payfactory Api
 * Payfactory specializes in embedded payment facilitation (payfac) services for ISVs and SaaS companies. Our gateway-friendly platform integrates with software systems to provide seamless payment facilitation with little to no development required, allowing our partners to minimize integration costs and quickly gain a new revenue stream. Founded by payment industry veterans, we believe that integrated processing should be simple, frictionless and fast â€“ while also maintaining the highest level of security, customer service and human support.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CreateSessionRequestSignerModel;
import com.konfigthis.client.model.SessionBusinessDetailsModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateSessionRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateSessionRequest {
  public static final String SERIALIZED_NAME_PRICING_PLAN_ID = "pricingPlanId";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN_ID)
  private String pricingPlanId;

  public static final String SERIALIZED_NAME_SIGNER = "signer";
  @SerializedName(SERIALIZED_NAME_SIGNER)
  private CreateSessionRequestSignerModel signer;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private URI redirectUrl;

  public static final String SERIALIZED_NAME_COMPLETE_URL = "completeUrl";
  @SerializedName(SERIALIZED_NAME_COMPLETE_URL)
  private URI completeUrl;

  public static final String SERIALIZED_NAME_REFRESH_URL = "refreshUrl";
  @SerializedName(SERIALIZED_NAME_REFRESH_URL)
  private URI refreshUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_BUSINESS_DETAILS = "businessDetails";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DETAILS)
  private SessionBusinessDetailsModel businessDetails;

  public CreateSessionRequest() {
  }

  public CreateSessionRequest pricingPlanId(String pricingPlanId) {
    
    
    
    
    this.pricingPlanId = pricingPlanId;
    return this;
  }

   /**
   * Id of the Pricing Plan. Only used if enabled for the partner
   * @return pricingPlanId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "APFOG8GTO04FKF", value = "Id of the Pricing Plan. Only used if enabled for the partner")

  public String getPricingPlanId() {
    return pricingPlanId;
  }


  public void setPricingPlanId(String pricingPlanId) {
    
    
    
    this.pricingPlanId = pricingPlanId;
  }


  public CreateSessionRequest signer(CreateSessionRequestSignerModel signer) {
    
    
    
    
    this.signer = signer;
    return this;
  }

   /**
   * Get signer
   * @return signer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CreateSessionRequestSignerModel getSigner() {
    return signer;
  }


  public void setSigner(CreateSessionRequestSignerModel signer) {
    
    
    
    this.signer = signer;
  }


  public CreateSessionRequest companyName(String companyName) {
    
    
    if (companyName != null && companyName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for companyName. Length must be greater than or equal to 1.");
    }
    
    this.companyName = companyName;
    return this;
  }

   /**
   * Name of the merchant account
   * @return companyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Test", required = true, value = "Name of the merchant account")

  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    
    
    if (companyName != null && companyName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for companyName. Length must be greater than or equal to 1.");
    }
    this.companyName = companyName;
  }


  public CreateSessionRequest redirectUrl(URI redirectUrl) {
    
    
    if (redirectUrl != null && redirectUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for redirectUrl. Length must be greater than or equal to 1.");
    }
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * Url to redirect the merchant user to when clicking the back button
   * @return redirectUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://test.com/return", required = true, value = "Url to redirect the merchant user to when clicking the back button")

  public URI getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(URI redirectUrl) {
    
    
    if (redirectUrl != null && redirectUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for redirectUrl. Length must be greater than or equal to 1.");
    }
    this.redirectUrl = redirectUrl;
  }


  public CreateSessionRequest completeUrl(URI completeUrl) {
    
    
    if (completeUrl != null && completeUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for completeUrl. Length must be greater than or equal to 1.");
    }
    
    this.completeUrl = completeUrl;
    return this;
  }

   /**
   * Url to redirect the merchant user to upon completing the application
   * @return completeUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://test.com/complete", required = true, value = "Url to redirect the merchant user to upon completing the application")

  public URI getCompleteUrl() {
    return completeUrl;
  }


  public void setCompleteUrl(URI completeUrl) {
    
    
    if (completeUrl != null && completeUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for completeUrl. Length must be greater than or equal to 1.");
    }
    this.completeUrl = completeUrl;
  }


  public CreateSessionRequest refreshUrl(URI refreshUrl) {
    
    
    if (refreshUrl != null && refreshUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for refreshUrl. Length must be greater than or equal to 1.");
    }
    
    this.refreshUrl = refreshUrl;
    return this;
  }

   /**
   * Url to redirect to the merchant user to when their session is expired
   * @return refreshUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://test.com/refresh", required = true, value = "Url to redirect to the merchant user to when their session is expired")

  public URI getRefreshUrl() {
    return refreshUrl;
  }


  public void setRefreshUrl(URI refreshUrl) {
    
    
    if (refreshUrl != null && refreshUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for refreshUrl. Length must be greater than or equal to 1.");
    }
    this.refreshUrl = refreshUrl;
  }


  public CreateSessionRequest externalId(String externalId) {
    
    
    if (externalId != null && externalId.length() < 3) {
      throw new IllegalArgumentException("Invalid value for externalId. Length must be greater than or equal to 3.");
    }
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Unique identifier for the merchant in your system
   * @return externalId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Test1234", required = true, value = "Unique identifier for the merchant in your system")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    if (externalId != null && externalId.length() < 3) {
      throw new IllegalArgumentException("Invalid value for externalId. Length must be greater than or equal to 3.");
    }
    this.externalId = externalId;
  }


  public CreateSessionRequest businessDetails(SessionBusinessDetailsModel businessDetails) {
    
    
    
    
    this.businessDetails = businessDetails;
    return this;
  }

   /**
   * Get businessDetails
   * @return businessDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SessionBusinessDetailsModel getBusinessDetails() {
    return businessDetails;
  }


  public void setBusinessDetails(SessionBusinessDetailsModel businessDetails) {
    
    
    
    this.businessDetails = businessDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateSessionRequest instance itself
   */
  public CreateSessionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSessionRequest createSessionRequest = (CreateSessionRequest) o;
    return Objects.equals(this.pricingPlanId, createSessionRequest.pricingPlanId) &&
        Objects.equals(this.signer, createSessionRequest.signer) &&
        Objects.equals(this.companyName, createSessionRequest.companyName) &&
        Objects.equals(this.redirectUrl, createSessionRequest.redirectUrl) &&
        Objects.equals(this.completeUrl, createSessionRequest.completeUrl) &&
        Objects.equals(this.refreshUrl, createSessionRequest.refreshUrl) &&
        Objects.equals(this.externalId, createSessionRequest.externalId) &&
        Objects.equals(this.businessDetails, createSessionRequest.businessDetails)&&
        Objects.equals(this.additionalProperties, createSessionRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pricingPlanId, signer, companyName, redirectUrl, completeUrl, refreshUrl, externalId, businessDetails, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSessionRequest {\n");
    sb.append("    pricingPlanId: ").append(toIndentedString(pricingPlanId)).append("\n");
    sb.append("    signer: ").append(toIndentedString(signer)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    completeUrl: ").append(toIndentedString(completeUrl)).append("\n");
    sb.append("    refreshUrl: ").append(toIndentedString(refreshUrl)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    businessDetails: ").append(toIndentedString(businessDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pricingPlanId");
    openapiFields.add("signer");
    openapiFields.add("companyName");
    openapiFields.add("redirectUrl");
    openapiFields.add("completeUrl");
    openapiFields.add("refreshUrl");
    openapiFields.add("externalId");
    openapiFields.add("businessDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("signer");
    openapiRequiredFields.add("companyName");
    openapiRequiredFields.add("redirectUrl");
    openapiRequiredFields.add("completeUrl");
    openapiRequiredFields.add("refreshUrl");
    openapiRequiredFields.add("externalId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateSessionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSessionRequest is not found in the empty JSON string", CreateSessionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSessionRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("pricingPlanId").isJsonNull() && (jsonObj.get("pricingPlanId") != null && !jsonObj.get("pricingPlanId").isJsonNull()) && !jsonObj.get("pricingPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingPlanId").toString()));
      }
      // validate the required field `signer`
      CreateSessionRequestSignerModel.validateJsonObject(jsonObj.getAsJsonObject("signer"));
      if (!jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if (!jsonObj.get("completeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completeUrl").toString()));
      }
      if (!jsonObj.get("refreshUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshUrl").toString()));
      }
      if (!jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // validate the optional field `businessDetails`
      if (jsonObj.get("businessDetails") != null && !jsonObj.get("businessDetails").isJsonNull()) {
        SessionBusinessDetailsModel.validateJsonObject(jsonObj.getAsJsonObject("businessDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSessionRequest>() {
           @Override
           public void write(JsonWriter out, CreateSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSessionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateSessionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateSessionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateSessionRequest
  * @throws IOException if the JSON string is invalid with respect to CreateSessionRequest
  */
  public static CreateSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSessionRequest.class);
  }

 /**
  * Convert an instance of CreateSessionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

